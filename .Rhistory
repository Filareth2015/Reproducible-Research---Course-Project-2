qplot(hwy, data = mpg, color = drv)
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"),  facets = .~drv, method = "loess")
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"),  facets = .~drv, set = "loess")
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"),  facets = .~drv)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
library(swirl)
library(swirl)
swirl()
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
library(swirl)
swirl()
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
swirl()
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
g <- ggplot(mpg, displ, hwy)
g <- ggplot(mpg, aes(displ, hwy)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth(lm)
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + facet_grid(. ~ drv)
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv) + ggtitle("Swirl Rules!")
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(color=drv))
g + geom_point(aes(color=drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color=drv), size = 2, alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color=drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type="l", ylim=c(-3,3))
g <- ggplot(testdat, aes(myx, myy))
g + geom_line(g)
g + geom_line(0)
g <- ggplot(testdat, aes(myx, myy), geom_line(0))
g + geom_line()
g + geom_line(ylim(-3,3))
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(c(-3,3))
g + geom_line() + coord_cartesian(ylim=c(-3,3))
g <- ggplot(, aes(x = displ, y = hwy, color = year))
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year))
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut())
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom = c("point", "smooth"), method = "lm")
qplot(carat, price, data = diamonds, color = cut, geom = c("point", "smooth"))
qplot(carat,price,data=diamonds, color=cut,geom=c("point","smooth"),method="lm")
swirl()
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(carat, price, data = diamonds, color = cut)
qplot(price,data=diamonds,geom="density",color=cut)
qplot(carat, price, data = diamonds)
qplot(price, data = diamonds, shape = cut)
qplot(carat,price,data=diamonds, shape=cut)
qplot(carat,price,data=diamonds, color = cut)
qplot(carat,price,data=diamonds, color = cut, geom = c("point", "smooth"))
qplot(carat,price,data=diamonds, color = cut, geom = c("point", "smooth"), facets = .~cut)
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length = 4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth,price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat,price)) + geom_boxplot() + facet_grid(. ~ cut)
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
result
library(httr)
hurl <- "http://biostat.jhsph.edu/~jleek/contact.html"
con <- url(hurl)
htmlCode <- readLines(con)
close(con)
sapply(htmlCode[c(10, 20, 30, 100)], nchar)
rep(1:9, len = 54)
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-"5:20"
-(5:20)
select(cran, -(x:ip_id))
select(cran, x:ip_id)
select(cran, -(X:ip_id))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, r_version == !is.na(NA))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id
)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size)
)
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_counts <- filter(pack_sum, unique > 465)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
set.seed(1234)
x <- rnorm(12, rep(1:3, each = 4), 0.2)
y <- rnorm(12, rep(c(1, 2, 1), each = 4), 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
set.seed(1234)
x <- rnorm(12, rep(1:3, each = 4), 0.2)
y <- rnorm(12, rep(c(1, 2, 1), each = 4), 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
set.seed(1234)
x <- rnorm(12, rep(1:3, each = 4), 0.2)
y <- rnorm(12, rep(c(1, 2, 1), each = 4), 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
x <- rnorm(12, rep(1:3, each = 4), 0.2)
y <- rnorm(12, rep(c(1, 2, 1), each = 4), 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
library(swirl)
swirl()
cmat
points(cx, cy, col = "red", "orange", "purple", pch = 3, cex = 2, lwd = 2)
point(cx, cy, col = "red", "orange", "purple", pch = 3, cex = 2, lwd = 2)
points(cmat, col = "red", "orange", "purple", pch = 3, cex = 2, lwd = 2)
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
apply(distTmp, c(1,12), which.min)
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col=c("black","red","green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame,6)$cluster, pch = 19, cex = 2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1]) * (svd1$d[1]) * (svd1$v[1])
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- (svd1$u[,1:2] * svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,2:5] %*% diag(svd1$d[2:5]) %*% t(svd1$v[,2:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[ , 562:563])
ssd$subject
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, boolean)
sub1 <- subset(ssd, subset = 1)
sub1 <- subset(ssd, subject = 1)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[ , 1:12])
myedit("showXY.R")
showMe(c(1:6))
mdist <- dist(sub1[ , 1:3])
hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[ , 10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[ , 2])
mdist <- dist(sub1[ 10:12])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[ , -c(562, 563)], centers == 6)
kClust <- kmeans(sub1[ , -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[ , -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch = 19, ylab = "Laying Cluster")
names(sub1)
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch = 19, ylab = "Walkdown Cluster")
f <- gl(3, 10)
f
pbeta(0.75, 2, 1)
dbeta(0.75, 2, 1)
qbeta(0.75, 2, 1)
pbeta(c(0.4, 0.5, 0.6), 2, 1)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
mean(x)
mean(temp)
Xmean <- sum(temp["X",] * temp["Prob",])
Xmean
p <- seq(0 , 1, length = 1000)
pbinom(10, size = 1000, prob = 0.5)
pbinom(10, size = 1000, prob = 0.01)
pbinom(100, size = 1000, prob = 0.01)
pbinom(1000, size = 1000, prob = 0.01)
qnorm(120, mean = 100, sd = 15)
qnorm(0.95, mean = 100, sd = 15)
rnorm(120, mean = 100, sd = 15)
qnorm(0.95, mean = 100, sd = 15)
qnorm(0.9, mean = 100, sd = 15)
pnorm(24.27, 29, 4.73)
qnorm(.95, 29, 4.73)
29+4.73+4.73
29*1.645
pnorm(1160, 1020, 50, lower.tail = FALSE)
pnorm(2.8, lower.tail = FALSE)
qnorm(.5, 29, 4.73)
qnorm(.1, 29, 4.73)
29-1.28*4.73
ppois(3, lambda = 3*4)
ppois(0.75, lambda = 2.5)
ppois(3, lambda = 2.5*4)
n <- 10000
means <- cumsum(rnorm(n))/(1:n)
means
n <- 100
means <- cumsum(rnorm(n))/(1:n)
means
cumsum(1:10
)
cumsum(1)
cumsum(1, 2)
cumsum(c(1, 2))
a <- c(1, 4)
b <- c(2, 2)
a/b
sample(0:1, 10, replace = TRUE)
q <- matrix(rnorm(100),10)
View(q)
choose(5,3)
choose(5,4)
choose(5,5)
pbinom(1, 5, prob = .8, lower.tail = FALSE)
pbinom(3, 5, prob = .8, lower.tail = FALSE)
pbinom(6, 5, prob = .8, lower.tail = FALSE)
pbinom(5, 5, prob = .8, lower.tail = FALSE)
pbinom(4, 5, prob = .8, lower.tail = FALSE)
pnorm(qnorm(.53))
qnorm(0.95)
pnorm(70, mean = 80, sd = 10, lower.tail = TRUE)
qnorm(0.95, mean = 1100, sd = 75)
qnorm(0.95, mean = 1100, sd = 7.5)
pbinom(2, 5, prob = 0.5)
pbinom(2, 5, prob = 0.5, lower.tail = FALSE)
pbinom(5, 5, prob = 0.5, lower.tail = FALSE)
pbinom(4, 5, prob = 0.5, lower.tail = FALSE)
pbinom(2, 5, prob = 0.5, lower.tail = TRUE)
pbinom(4, 5, prob = 0.5, lower.tail = TRUE)
4/32
5/32
pbinom(3, 5, prob = 0.5, lower.tail = FALSE)
pnorm(14, mean = 15, sd = 1, lower.tail = TRUE)
pnorm(16, mean = 15, sd = 1, lower.tail = TRUE)
pnorm(16, mean = 15, sd = 1, lower.tail = TRUE) - pnorm(14, mean = 15, sd = 1, lower.tail = TRUE)
1/sqrt(12000)
ppois(10, lambda = 5 * 3)
sessionInfo()
k <- 100
xvals <- seq(-5, 5, length = k)
xvals
qnorm(.95)
pnorm(-1, mean = 0, sd = 1)
pt(0, 15, lower.tail = FALSE)
pt(1, 15, lower.tail = FALSE)
install.packages("UsingR")
library(UsingR)
data(father.son)
x <- father.son$sheight
n <- length(x)
B <- 10000
resamples <- matrix(sample(x, n * B, replace = TRUE), B, n)
resampledMedians <- apply(resamples, 1, median)
head(resampledMedians)
View(resamples)
c <- sample(x, n * B, replace = TRUE)
sample(c(1:100))
v <- sample(c(1:100))
library(datasets)
data(ToothGrowth)
str(ToothGrowth)
head(ToothGrowth)
summary(ToothGrowth)
View(ToothGrowth)
plot(ToothGrowth)
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=dose)) +
xlab("Dose in miligrams") +ylab("Tooth length")
library(ggplot2)
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=dose)) +
xlab("Dose in miligrams") +ylab("Tooth length")
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=dose)) + xlab("Dose in miligrams") +ylab("Tooth length")
ggplot(aes(x=supp, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=supp))+
xlab("Supplement type") +ylab("Tooth length")
range(ToothGrowth$dose)
library(datasets)
data(ToothGrowth)
str(ToothGrowth)
head(ToothGrowth)
summary(ToothGrowth)
library(ggplot2)
ggplot(ToothGrowth, aes(x=factor(dose), y=len)) +
facet_grid(.~supp) +
geom_boxplot(aes(fill = supp), show_guide = FALSE) +
labs(title="Guinea pig tooth length by dosage for each type of supplement",
x="Dose (mg/day)",
y="Tooth Length")
ggplot(ToothGrowth, aes(x=factor(dose), y=len)) +
facet_grid(.~supp) +
geom_boxplot(aes(fill = supp)) +
labs(title="Guinea pig tooth length by dosage for each type of supplement",
x="Dose (mg/day)",
y="Tooth Length")
hypoth1<-t.test(len ~ supp, data = ToothGrowth)
hypoth1$conf.int
hypoth1$p.value
hypoth2<-t.test(len ~ supp, data = subset(ToothGrowth, dose == 0.5))
hypoth2$conf.int
hypoth2$p.value
hypoth3<-t.test(len ~ supp, data = subset(t, dose == 1))
hypoth3$conf.int
hypoth3$p.value
hypoth3<-t.test(len ~ supp, data = subset(ToothGrowth, dose == 1))
hypoth3$conf.int
hypoth3$p.value
hypoth4<-t.test(len ~ supp, data = subset(ToothGrowth, dose == 2))
hypoth4$conf.int
hypoth4$p.value
t.test(len ~ supp, data = subset(ToothGrowth, dose == 2))
t.test(ToothGrowth[supp=="OJ"], ToothGrowth[supp=="VC"], paired = FALSE, var.equal = FALSE)$p.value
len<-ToothGrowth$len
supp<-ToothGrowth$supp
dose<-ToothGrowth$dose
t.test(len[supp=="OJ"], len[supp=="VC"], paired = FALSE, var.equal = FALSE)
t.test(len[dose==2], len[dose==1], paired = FALSE, var.equal = TRUE)
t.test(len[dose==1], len[dose==0.5], paired = FALSE, var.equal = TRUE)
t.test(len[dose==2], len[dose==0.5], paired = FALSE, var.equal = TRUE)
hypoth1<-t.test(len ~ supp, data = ToothGrowth)
hypoth1$conf.int
hypoth1$p.value
hypoth2<-t.test(len ~ supp, data = subset(ToothGrowth, dose == 0.5))
t.test(len ~ supp, data = subset(ToothGrowth, dose == 0.5))
setwd("D:/Data_science/Reproducible research/Reproducible-Research---Course-Project-2")
storm.data = read.csv(bzfile("repdata-data-StormData.csv.bz2"), header = TRUE)
View(storm.data)
storm.data$EVTYPE
library(ggplot2)
library(plyr)
storm.data$PROPMULT <- 1
storm.data$PROPMULT[storm.data$PROPDMGEXP =="H"] <- 100
storm.data$PROPMULT[storm.data$PROPDMGEXP =="K"] <- 1000
storm.data$PROPMULT[storm.data$PROPDMGEXP =="M"] <- 1000000
storm.data$PROPMULT[storm.data$PROPDMGEXP =="B"] <- 1000000000
storm.data$CROPMULT <- 1
storm.data$CROPMULT[storm.data$CROPDMGEXP =="H"] <- 100
storm.data$CROPMULT[storm.data$CROPDMGEXP =="K"] <- 1000
storm.data$CROPMULT[storm.data$CROPDMGEXP =="M"] <- 1000000
storm.data$CROPMULT[storm.data$CROPDMGEXP =="B"] <- 1000000000
aggregate_data <- ddply(.data = storm.data, .variables = .(EVTYPE),
fatalities = sum(FATALITIES),
injuries = sum(INJURIES),
property_damage = sum(PROPDMG * PROPMULT),
crop_damage = sum(CROPDMG * CROPMULT),
summarize)
population_data <- arrange(aggregate_data, desc(fatalities + injuries))
damage_data <- arrange(aggregate_data, desc(property_damage + crop_damage))
## Question 1
ggplot(data = head(population_data, 7), aes(x = factor(EVTYPE), y = (fatalities + injuries), fill = EVTYPE)) +
geom_bar(stat="identity", fill="#EE6363") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ggtitle("Weather Events with Harmful Population Health from 1950 to 2011")
View(population_data)
